{"mappings":"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","sources":["src/apca-w3-v.0.0.98g-4g.js"],"sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n/** @preserve\n/////    SAPC APCA - Advanced Perceptual Contrast Algorithm\n/////           Beta 0.0.98G-4g W3 • contrast function only\n/////           DIST: W3 Revision date: Nov 29, 2021\n/////    Function to parse color values and determine Lc contrast\n/////    Copyright © 2019-2021 by Andrew Somers. All Rights Reserved.\n/////    LICENSE:  W3 LICENSE\n/////    CONTACT: For SAPC/APCA Please use the ISSUES tab at:\n/////    https://github.com/Myndex/SAPC-APCA/\n// */\n///////////////////////////////////////////////////////////////////////////////\n/////\n/////    FORWARD CONTRAST USAGE:\n/////        Use sRGBtoY(color) to convert sRGB to Luminance (Y)\n/////        Then send Y-text and Y-background to APCAcontrast(Text, BG)\n/////\n/////    Lc = APCAcontrast( sRGBtoY(TEXTcolor) , sRGBtoY(BACKGNDcolor) );\n/////\n/////    Live Demonstrator at https://www.myndex.com/APCA/\n/////\n/////    REVERSE CONTRAST USAGE:\n/////        Send desired Lc contrast, and the BG (or txt) Y, and return type\n/////        APCAreverse(Lc,BG,ReType='TXT', polarity='best') // TXT or BG\n/////\n/////    text = APCAreverse(60, sRGBtoY(BACKGNDcolor) ,'TXT');\n///////////////////////////////////////////////////////////////////////////////\n\n// ==ClosureCompiler==\n// @compilation_level SIMPLE_OPTIMIZATIONS\n// @output_file_name SAPCsRGB.98.min.js\n// @code_url https://www.myndex.com/SAPC/JS/SAPCsRGB.98.js\n// ==/ClosureCompiler==\n// https://closure-compiler.appspot.com/home#code%3D%252F%252F%2520%253D%253DClosureCompiler%253D%253D%250A%252F%252F%2520%2540compilation_level%2520SIMPLE_OPTIMIZATIONS%250A%252F%252F%2520%2540output_file_name%2520SAPCsRGB.98.min.js%250A%252F%252F%2520%2540code_url%2520https%253A%252F%252Fwww.myndex.com%252FSAPC%252FJS%252FSAPCsRGB.98.js%250A%252F%252F%2520%253D%253D%252FClosureCompiler%253D%253D%250A\n\n////////////////////////////////////////////////////////////////////////////////\n/////\n/////                      SAPC Method and APCA Algorithm\n/////   W3 Licensed Version: https://github.com/Myndex/apca-w3\n/////   GITHUB: https://github.com/Myndex/SAPC-APCA\n/////   DEVELOPER SITE: https://www.myndex.com/WEB/Perception\n/////\n/////   Acknowledgments and Thanks To:\n/////   • This project references the research and work of Dr.Lovie-Kitchin, \n/////     Dr.Legge, Dr.Arditi, M.Fairchild, R.Hunt, M.Stone, Dr.Poynton, \n/////     L.Arend, M.Luo, E.Burns, R.Blackwell, P.Barton, M.Brettel, and many \n/////     others — see refs at https://www.myndex.com/WEB/WCAG_CE17polarity\n/////   • Bruce Bailey of USAccessBoard for his encouragement, ideas, & feedback\n/////   • Chris Loiselle of Oracle for getting us back on track in a pandemic\n/////   • Chris Lilley of W3 for his early and continued comments & feedback.\n/////   • The many volunteer test subjects for participating in the studies.\n/////   • Principal research conducted at Myndex by A.Somers.\n/////\n////////////////////////////////////////////////////////////////////////////////\n\n////////////////////////////////////////////////////////////////////////////////\n/////\n/////   *****  SAPC BLOCK  *****\n/////\n/////   For Evaluations, refer to this as: SAPC-8, v0.0.98 G-series constant 4g\n/////            SAPC • S-LUV Advanced Predictive Color\n/////\n/////   SIMPLE VERSION — Only the basic APCA contrast predictor.\n/////\n/////   Included Extensions & Model Features in this file:\n/////       • SAPC-8 Core Contrast (Base APCA, non-clinical use only) \n/////       • G series constants, group \"G-4g\" using a 2.4 monitor exponent\n/////       • sRGB to Y, parses numeric sRGB color to luminance\n/////       • SoftToe black level soft clamp and flare compensation.\n/////\n/////\n////////////////////////////////////////////////////////////////////////////////\n/////\n/////               DISCLAIMER AND LIMITATIONS OF USE\n/////     APCA is an embodiment of certain suprathreshold contrast\n/////     prediction technologies and it is licensed to the W3 on a\n/////     limited basis for use in certain specific accessibility\n/////     guidelines for web content only. APCA may be used for \n/////     predicting colors for web content use without royalty.\n/////\n/////     However, Any such license excludes other use cases\n/////     not related to web content. Prohibited uses include\n/////     medical, clinical evaluation, human safety related,\n/////     aerospace, transportation, military applications, \n/////     and uses which are not specific to web based content\n/////     presented on self-illuminated displays or devices.\n/////\n////////////////////////////////////////////////////////////////////////////////\n\n//////////   APCA 0.0.98 G 4g USAGE  //////////////////////////////////////////////\n///\n///  The API for \"APCA_0_0_98G_4g_minimal\" is trivially simple.\n///  Send text and background sRGB numeric values to the sRGBtoY() function,\n///  and send the resulting text-Y and background-Y to the APCAcontrast function,\n///  it returns a signed float with the numeric Lc contrast result.\n///  \n///  The two inputs are TEXT color and BACKGROUND color in that order.\n///  Each must be a numeric NOT a string, as this simple version has\n///  no string parsing utilities. EXAMPLE:\n///  ________________________________________________________________________\n///\n///     txtColor = 0x123456; // color of the text, as will be rendered\n///     bgColor  = 0xabcdef; // color for the background, as will be rendered\n///\n///     contrastLc = APCAcontrast( sRGBtoY(txtColor) , sRGBtoY(bgColor) );\n///  ________________________________________________________________________\n///\n///                  **********   QUICK START   **********\n///\n///  Each color must be a 24bit color (8 bit per channel) as a single integer\n///  (or 0x) sRGB encoded color, i.e. White is either the integer 16777216 or\n///  the hex 0xffffff. A float is returned with a positive or negative value.\n///  Negative values mean light text and a dark background, positive values\n///  mean dark text and a light background. 60.0, or -60.0 is a contrast\n///  \"sort of like\" the old WCAG 2's 4.5:1. NOTE: the total range is now less\n///  than ± 110, so output can be rounded to a signed INT but DO NOT output\n///  an absolute value - light text on dark BG should return a negative number.\n///\n///     *****  IMPORTANT: Do Not Mix Up Text and Background inputs.  *****\n///     ****************   APCA is polarity dependent!   *****************\n///  \n////////////////////////////////////////////////////////////////////////////////\n\n\n////////////////////////////////////////////////////////////////////////////////\n/////  BEGIN APCA 0.0.98G 4g W3 BLOCK  \\///////////////////////////////////////\n////                                    \\/////////////////////////////////////\n\n//////////  ƒ  sRGBtoY()  //////////////////////////////////////////////////\n//export \nfunction sRGBtoY (sRGBcolor) { // send sRGB 8bpc (0xFFFFFF) or string\n\n/////   APCA 0.0.98 G - 4g - W3 Constants   ////////////////////////\n\nconst mainTRC = 2.4; // 2.4 exponent emulates actual monitor perception\n    \nconst sRco = 0.2126729, \n      sGco = 0.7151522, \n      sBco = 0.0721750; // sRGB coefficients\n\n///// Parse color /////\n\n    let r,g,b;\n    // let a = 1.0; // for future use\n\n    if (typeof sRGBcolor === 'string') {\n        let rgba = parseString(sRGBcolor);\n        if(rgba){\n          r = rgba[0];\n          g = rgba[1];\n          b = rgba[2];\n          // a = rgba[3]; // for future use\n        } else { return -1 } // return -1 on parse error \n    } else if (typeof sRGBcolor === 'number') {\n        r = (sRGBcolor & 0xFF0000) >> 16,\n        g = (sRGBcolor & 0x00FF00) >> 8,\n        b = (sRGBcolor & 0x0000FF);\n    } else { return -2; }; // return -2 on type error \n\n         // linearize r, g, or b then apply coefficients\n        // and sum then return the resulting luminance\n\n  function simpleExp (chan) { return Math.pow(chan/255.0, mainTRC); };\n\n  return sRco * simpleExp(r) + sGco * simpleExp(g) + sBco * simpleExp(b);\n\n} // End sRGBtoY()\n\n\n\n\n\n//////////  ƒ  APCAcontrast()  /////////////////////////////////////////////\n//export \nfunction APCAcontrast (txtY,bgY) {\n                 // send linear Y (luminance) for text and background.\n                // txtY and bgY must be between 0.0-1.0\n               // IMPORTANT: Do not swap, polarity is important.\n \n  const icp = [0.0,1.1];     // input range clamp / input error check\n\n  if(isNaN(txtY)||isNaN(bgY)||Math.min(txtY,bgY)<icp[0]||Math.max(txtY,bgY)>icp[1]){\n    return 0;  // return zero on error\n    // return 'error'; // optional string return for error\n  };\n  \n//////////   APCA 0.0.98 G - 4g - W3 Constants   ///////////////////////\n\n  const normBG = 0.56, \n        normTXT = 0.57,\n        revTXT = 0.62,\n        revBG = 0.65;  // G-4g constants for use with 2.4 exponent\n\n  const blkThrs = 0.022,\n        blkClmp = 1.414, \n        scaleBoW = 1.14,\n        scaleWoB = 1.14,\n        loBoWoffset = 0.027,\n        loWoBoffset = 0.027,\n        loClip = 0.1,\n        deltaYmin = 0.0005;\n\n//////////   SAPC LOCAL VARS   /////////////////////////////////////////\n  \n  let SAPC = 0.0;            // For raw SAPC values\n  let outputContrast = 0.0; // For weighted final values\n  \n  // TUTORIAL\n  \n  // Use Y for text and BG, and soft clamp black,\n  // return 0 for very close luminances, determine\n  // polarity, and calculate SAPC raw contrast\n  // Then scale for easy to remember levels.\n\n  // Note that reverse contrast (white text on black)\n  // intentionally returns a negative number\n  // Proper polarity is important!\n\n//////////   BLACK SOFT CLAMP   ////////////////////////////////////////\n\n          // Soft clamps Y for either color if it is near black.\n  txtY = (txtY > blkThrs) ? txtY :\n                            txtY + Math.pow(blkThrs - txtY, blkClmp);\n  bgY = (bgY > blkThrs) ? bgY :\n                          bgY + Math.pow(blkThrs - bgY, blkClmp);\n\n       ///// Return 0 Early for extremely low ∆Y\n  if ( Math.abs(bgY - txtY) < deltaYmin ) { return 0.0; }\n\n\n//////////   APCA/SAPC CONTRAST   //////////////////////////////////////\n\n  if ( bgY > txtY ) {  // For normal polarity, black text on white (BoW)\n\n           // Calculate the SAPC contrast value and scale\n      \n    SAPC = ( Math.pow(bgY, normBG) - Math.pow(txtY, normTXT) ) * scaleBoW;\n\n            // Low Contrast smooth rollout to prevent polarity reversal\n           // and also a low-clip for very low contrasts\n    outputContrast = (SAPC < loClip) ? 0.0 : SAPC - loBoWoffset;\n\n  } else {  // For reverse polarity, light text on dark (WoB)\n           // WoB should always return negative value.\n\n    SAPC = ( Math.pow(bgY, revBG) - Math.pow(txtY, revTXT) ) * scaleWoB;\n\n    outputContrast = (SAPC > -loClip) ? 0.0 : SAPC + loWoBoffset;\n  }\n\n         // return Lc (lightness contrast) as a signed numeric value \n        // Round to the nearest whole number is optional.\n       // Rounded can be a signed INT as output will be within ± 127 \n       \n  return  Math.round(outputContrast * 100.0);\n  \n} // End APCAcontrast()\n\n\n\n\n\n/////  ƒ  parseString()  ///////////////////////////////////////////////////\n\nfunction parseString (colorString = '#abcdef') {\n\n                  // strip spaces, #, & common junk and make a clean string\n    colorString = colorString.replace(/[\\s `~!@#$%^&*<>?{}:;\"'+=_-]/g,'');\n    \n    colorString = colorString.toLowerCase();   // set lowercase\n\n///// CSS4 NAMED COLORS /////////////\n\n      // See if name is matched and overwrite the input\n  let namedColors = { aliceblue:'f0f8ff',antiquewhite:'faebd7',aqua:'00ffff',aquamarine:'7fffd4',azure:'f0ffff',beige:'f5f5dc',bisque:'ffe4c4',black:'000000',blanchedalmond:'ffebcd',blue:'0000ff',blueviolet:'8a2be2',brown:'a52a2a',burlywood:'deb887',cadetblue:'5f9ea0',chartreuse:'7fff00',chocolate:'d2691e',coral:'ff7f50',cornflowerblue:'6495ed',cornsilk:'fff8dc',crimson:'dc143c',cyan:'00ffff',darkblue:'00008b',darkcyan:'008b8b',darkgoldenrod:'b8860b',darkgray:'a9a9a9',darkgreen:'006400',darkgrey:'a9a9a9',darkkhaki:'bdb76b',darkmagenta:'8b008b',darkolivegreen:'556b2f',darkorange:'ff8c00',darkorchid:'9932cc',darkred:'8b0000',darksalmon:'e9967a',darkseagreen:'8fbc8f',darkslateblue:'483d8b',darkslategray:'2f4f4f',darkslategrey:'2f4f4f',darkturquoise:'00ced1',darkviolet:'9400d3',deeppink:'ff1493',deepskyblue:'00bfff',dimgray:'696969',dimgrey:'696969',dodgerblue:'1e90ff',firebrick:'b22222',floralwhite:'fffaf0',forestgreen:'228b22',fuchsia:'ff00ff',gainsboro:'dcdcdc',ghostwhite:'f8f8ff',gold:'ffd700',goldenrod:'daa520',gray:'808080',green:'008000',greenyellow:'adff2f',grey:'808080',honeydew:'f0fff0',hotpink:'ff69b4',indianred:'cd5c5c',indigo:'4b0082',ivory:'fffff0',khaki:'f0e68c',lavender:'e6e6fa',lavenderblush:'fff0f5',lawngreen:'7cfc00',lemonchiffon:'fffacd',lightblue:'add8e6',lightcoral:'f08080',lightcyan:'e0ffff',lightgoldenrodyellow:'fafad2',lightgray:'d3d3d3',lightgreen:'90ee90',lightgrey:'d3d3d3',lightpink:'ffb6c1',lightsalmon:'ffa07a',lightseagreen:'20b2aa',lightskyblue:'87cefa',lightslategray:'778899',lightslategrey:'778899',lightsteelblue:'b0c4de',lightyellow:'ffffe0',lime:'00ff00',limegreen:'32cd32',linen:'faf0e6',magenta:'ff00ff',maroon:'800000',mediumaquamarine:'66cdaa',mediumblue:'0000cd',mediumorchid:'ba55d3',mediumpurple:'9370db',mediumseagreen:'3cb371',mediumslateblue:'7b68ee',mediumspringgreen:'00fa9a',mediumturquoise:'48d1cc',mediumvioletred:'c71585',midnightblue:'191970',mintcream:'f5fffa',mistyrose:'ffe4e1',moccasin:'ffe4b5',navajowhite:'ffdead',navy:'000080',oldlace:'fdf5e6',olive:'808000',olivedrab:'6b8e23',orange:'ffa500',orangered:'ff4500',orchid:'da70d6',palegoldenrod:'eee8aa',palegreen:'98fb98',paleturquoise:'afeeee',palevioletred:'db7093',papayawhip:'ffefd5',peachpuff:'ffdab9',peru:'cd853f',pink:'ffc0cb',plum:'dda0dd',powderblue:'b0e0e6',purple:'800080',rebeccapurple:'663399',red:'ff0000',rosybrown:'bc8f8f',royalblue:'4169e1',saddlebrown:'8b4513',salmon:'fa8072',sandybrown:'f4a460',seagreen:'2e8b57',seashell:'fff5ee',sienna:'a0522d',silver:'c0c0c0',skyblue:'87ceeb',slateblue:'6a5acd',slategray:'708090',slategrey:'708090',snow:'fffafa',springgreen:'00ff7f',steelblue:'4682b4',tan:'d2b48c',teal:'008080',thistle:'d8bfd8',tomato:'ff6347',turquoise:'40e0d0',violet:'ee82ee',wheat:'f5deb3',white:'ffffff',whitesmoke:'f5f5f5',yellow:'ffff00',yellowgreen:'9acd32',gray1:'111111',gray2:'222222',gray3:'333333',gray4:'444444',gray5:'555555',gray6:'666666',gray7:'777777',gray8:'888888',gray9:'999999',graya:'aaaaaa',grayb:'bbbbbb',grayc:'cccccc',grayd:'dddddd',graye:'eeeeee',grey1:'111111',grey2:'222222',grey3:'333333',grey4:'444444',grey5:'555555',grey6:'666666',grey7:'777777',grey8:'888888',grey9:'999999',greya:'aaaaaa',greyb:'bbbbbb',greyc:'cccccc',greyd:'dddddd',greye:'eeeeee'};\n\n    for (let key in namedColors) {\n        if (colorString == key) {\n            colorString = namedColors[key];\n            break;\n        }\n    }\n\n    // end of named colors section\n\n    // ARRAY OF COLOR DEFINITION OBJECTS\n    // objects with alpha are separated, and immediately\n    // follow the non-alpha version. Float rgb is not added yet.\n    \n  let colorDefs = [\n    {\n      rex: /^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/,\n      parseStr: function (slices){ // rgb(0,0,0)\n        return [\n          parseInt(slices[1]),\n          parseInt(slices[2]),\n          parseInt(slices[3])\n        ];\n      }\n    },\n    {\n      rex: /^([0-9|a-f])([0-9|a-f])([0-9|a-f])$/i,\n      parseStr: function (slices){ // fff\n        return [\n          parseInt(slices[1]+slices[1],16),\n          parseInt(slices[2]+slices[2],16),\n          parseInt(slices[3]+slices[3],16)\n        ];\n      }\n    },\n    {\n      rex: /^([0-9|a-f])([0-9|a-f])([0-9|a-f])([0-9|a-f])$/i,\n      parseStr: function (slices){ // fffa\n        return [\n          parseInt(slices[1]+slices[1],16),\n          parseInt(slices[2]+slices[2],16),\n          parseInt(slices[3]+slices[3],16),\n          parseInt(slices[4]+slices[4],16)\n        ];\n      }\n    },\n    {\n      rex: /^([0-9|a-f]{2})([0-9|a-f]{2})([0-9|a-f]{2})$/i,\n      parseStr: function (slices){ // ffffff\n        return [\n          parseInt(slices[1],16),\n          parseInt(slices[2],16),\n          parseInt(slices[3],16)\n        ];\n      }\n    },\n    {\n      rex: /^([0-9|a-f]{2})([0-9|a-f]{2})([0-9|a-f]{2})([0-9|a-f]{2})$/i,\n      parseStr: function (slices){ // ffffffaa\n        return [\n          parseInt(slices[1],16),\n          parseInt(slices[2],16),\n          parseInt(slices[3],16),\n          parseInt(slices[4],16)\n        ];\n      }\n    }\n  ];\n\n  // REGEX SEARCH CASCADE TO DETERMINE INPUT TYPE\n  // NEW: Alpha Inputs and the new \"2 Char Hex\"\n  // Which auto-makes grey based on the first\n  // two characters typed. (f4 becomes f4f4f4)\n  // this.r etc are type INT\n  \n  let colorDefLen = colorDefs.length;\n  let rexInput, slicesInput;\n  let r,g,b;\n  let a = 255, i = 0;\n\n    // Loop stops once valid color is found\n  for (; i < colorDefLen; i++) {\n\n    rexInput = colorDefs[i].rex;\n    slicesInput = rexInput.exec(colorString);\n\n    if (slicesInput) {\n      let channel = colorDefs[i].parseStr(slicesInput);\n      //  Shishado™ cleansing masks for that refreshing, clean feeling.\n      r = channel[0] & 0xFF;\n      g = channel[1] & 0xFF;\n      b = channel[2] & 0xFF;\n      (isNaN(channel[3])) ? this.a = 255 : this.a = channel[3] & 0xFF;\n      \n      return [r,g,b,a];\n    }\n  }\n    return colorString //false; // return false due to error\n}\n\n////\\                                  /////////////////////////////////////////\n/////\\  END APCA 0.0.98G 4g W3 BLOCK  /////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////\n"],"names":[],"version":3,"file":"index.34f4e734.js.map","sourceRoot":"/__parcel_source_root/"}